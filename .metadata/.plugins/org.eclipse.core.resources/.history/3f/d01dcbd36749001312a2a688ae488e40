package src.TestSuite;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import src.InfixFullParantEx;
import src.MyGenericsStack;
import src.TowersOfHanoiImpl;

public class InfixFullParantExTest {
	@Test
	public void testInfixFullParantExTest() {
		InfixFullParantEx infixEvaluate = new InfixFullParantEx();
		assertNotNull(infixEvaluate);
	}
	
	@Test
	public void testSumEvaluateInfix() {
		String sum = InfixFullParantEx.evaluateInfix("{10+ 2}");
		assertEquals(sum, "12");
	}	
	
	@Test
	public void testMultEvaluateInfix() {
		String mult = InfixFullParantEx.evaluateInfix("(5*3)");
		assertEquals(mult, "15");
	}
	
	@Test
	public void testSubEvaluateInfix() {
		String sub = InfixFullParantEx.evaluateInfix("{10 -8}");
		assertEquals(sub, "2");
	}
	@Test
	public void DivEvaluateInfix() {
		String div = InfixFullParantEx.evaluateInfix("(30 / 3)");
		assertEquals(div, "10");
	}

	@Test
	public void Div2EvaluateInfix() {
		String div2 = InfixFullParantEx.evaluateInfix("(3 / 3+]");
		assertEquals(div2, "+");
	}
	
	@Test
	public void OpFalseEvaluateInfix() {
		String op = InfixFullParantEx.evaluateInfix("(3 ( 3)");
		assertEquals(op, "0");
	}
	
	@Test
	public void EmptyStackEvaluateInfix() {
		String es = InfixFullParantEx.evaluateInfix("3+5)");
		assertEquals(es, "8");
	}
 	
	@Test
	/* 
	 * Error condition (integer divided by zero) 
	 */
	public void DivEvaluateInfixError() {
		String divzero = InfixFullParantEx.evaluateInfix("{10/ 0} ");
		assertEquals(divzero, "");
	}
}