package src.TestSuite;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith; 
import org.junit.runners.Suite;

import src.InfixFullParantEx;
import src.MyGenericsStack;

class MyGenericsStackTestClass {
	private MyGenericsStack<String> GenericsStack = new MyGenericsStack<String>(5);

//	@Test
	public void testMyGenericsStackObject() {
		assertNotNull(GenericsStack);
	}
	
	public void testPush() {
		assertNotNull(GenericsStack);
		assertFalse(GenericsStack.isStackFull());
		while(!GenericsStack.isStackFull()) {
			GenericsStack.push("a");
		}
		assertTrue(GenericsStack.isStackFull());
		GenericsStack.push("b");
		assertFalse(GenericsStack.isStackFull());
		testPeek();
	} 
	
//	@Test
	public void testPushPop() {
		testPush();
		try {
			while(!GenericsStack.isStackEmpty()) {
				GenericsStack.pop();
			}
			GenericsStack.pop();
		} catch(Exception ex) {
			assertEquals("Stack is empty. Can not remove element.",ex.getMessage());
		}
	}
	
	public void testPeek() {
		assertEquals(GenericsStack.peek(), "b");
	}
}

class InfixFullParantExTestClass {
	private final ByteArrayOutputStream errConsole = new ByteArrayOutputStream();
	
	@BeforeClass
	public void setErrStream() {
	    System.setErr(new PrintStream(errConsole));
	}
	
	@AfterClass
	public void cleanErrStream() {
	    System.setErr(null);
	}
	
//	@Test
	public void testInfixFullParantEx() {
		InfixFullParantEx infixEvaluate = new InfixFullParantEx();
		assertNotNull(infixEvaluate);
	}
	
//	@Test
	public void testEvaluateInfix() {
		/* operations */
		String sum = InfixFullParantEx.evaluateInfix("{10+ 2}");
		assertEquals("12",sum);
		String mult = InfixFullParantEx.evaluateInfix("(5*3)");
		assertEquals("15",mult);
		String sub = InfixFullParantEx.evaluateInfix("{10 -8}");
		assertEquals("2",sub);
		String div = InfixFullParantEx.evaluateInfix("(30 / 3)");
		assertEquals("10",div);
		/* no start char */
		String res = InfixFullParantEx.evaluateInfix("3+5)");
		assertEquals("8",res);
		/* invalid end char */
		res = InfixFullParantEx.evaluateInfix("(3 / 3+]");
		assertEquals("+",res);
		/* invalid operator */
		res = InfixFullParantEx.evaluateInfix("(3 ( 3)");
		assertEquals("0",res);
		/* divide by zero */
		@SuppressWarnings("unused")
		String divzero = InfixFullParantEx.evaluateInfix("{10/ 0} ");
		assertTrue(errConsole.toString().startsWith("java.lang.ArithmeticException: / by zero"));
	}
}
//@RunWith(Suite.class) 
//@Suite.SuiteClasses({
//	MyGenericsStackTestCase.class
//	InfixFullParantExTest.class,
//	MyDynamicStackTest.class,
//	TowersOfHanoiImplTest.class,
//	MyMergeSortTest.class,
//	MyLinearSearchTest.class,
//	MyBinarySearchTest.class,
//	RecursiveSearchTest.class
//})
public class MyTestSuiteEx {
	private MyGenericsStackTestClass myGenericsStackTest = new MyGenericsStackTestClass();
	private InfixFullParantExTestClass infixFullParantExTest = new InfixFullParantExTestClass(); 
//	@BeforeClass 
//	public void setUpClass() {
//        // Common initialization done once
//    }
	@Test
	public void testMyGenericsStack() {
		myGenericsStackTest.testMyGenericsStackObject();
		myGenericsStackTest.testPushPop();
		infixFullParantExTest.testEvaluateInfix();
	}
	
//    @AfterClass 
//    public static void tearDownClass() {
//        // Common cleanup for all tests
//    }
}
