package src.TestSuite;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import src.MyDynamicStack;
import src.MyGenericsStack;
import src.InfixFullParantEx;

public class TestSuite {
	private final ByteArrayOutputStream errConsole = new ByteArrayOutputStream();
	private final ByteArrayOutputStream outConsole = new ByteArrayOutputStream();
	
	@Before
	public void setErrStream() {
	    System.setErr(new PrintStream(errConsole));
	}
	
	@After
	public void cleanErrStream() {
	    System.setErr(null);
	}
	
	@Before
	public void setOutStream() {
		System.setOut(new PrintStream(outConsole));
	}
	
	@After
	public void cleanOutStream() {
		System.setOut(null);
	}
	
	/**
	 * MyGenericsStack.class
	 */
	private MyGenericsStack<String> GenericsStack = new MyGenericsStack<String>(5);
	
	@Test
	public void testMyGenericsStackObject() {
		assertNotNull(GenericsStack);
	}
	
	public void testMyGenericsStackPush() {
		assertNotNull(GenericsStack);
		assertFalse(GenericsStack.isStackFull());
		while(!GenericsStack.isStackFull()) {
			GenericsStack.push("a");
		}
		assertTrue(GenericsStack.isStackFull());
		GenericsStack.push("b");
		assertFalse(GenericsStack.isStackFull());
		testMyGenericsStackPeek();
	} 
	
	@Test
	public void testMyGenericsStackPushPop() {
		testMyGenericsStackPush();
		try {
			while(!GenericsStack.isStackEmpty()) {
				GenericsStack.pop();
			}
			GenericsStack.pop();
		} catch(Exception ex) {
			assertEquals("Stack is empty. Can not remove element.",ex.getMessage());
		}
	}
	
	public void testMyGenericsStackPeek() {
		assertEquals(GenericsStack.peek(), "b");
	}
	
	/**
	 * InfixFullParantEx.class
	 */    
	@Test
	public void testEvaluateInfix() {
		/* operations */
		String sum = InfixFullParantEx.evaluateInfix("{10+ 2}");
		assertEquals("12",sum);
		String mult = InfixFullParantEx.evaluateInfix("(5*3)");
		assertEquals("15",mult);
		String sub = InfixFullParantEx.evaluateInfix("{10 -8}");
		assertEquals("2",sub);
		String div = InfixFullParantEx.evaluateInfix("(30 / 3)");
		assertEquals("10",div);
		/* no start char */
		String res = InfixFullParantEx.evaluateInfix("3+5)");
		assertEquals("8",res);
		/* invalid end char */
		res = InfixFullParantEx.evaluateInfix("(3 / 3+]");
		assertEquals("+",res);
		/* invalid operator */
		res = InfixFullParantEx.evaluateInfix("(3 ( 3)");
		assertEquals("0",res);
		/* divide by zero */
		@SuppressWarnings("unused")
		String divzero = InfixFullParantEx.evaluateInfix("{10/ 0} ");
		assertTrue(errConsole.toString().startsWith("java.lang.ArithmeticException: / by zero"));
	}
	
	@Test
	public void testInfixFullParantEx() {
		InfixFullParantEx infixEvaluate = new InfixFullParantEx();
		assertNotNull(infixEvaluate);
	}
	
	/**
	 * MyDynamicStack.class
	 */
	private int size = 5;
	private int entry = 1;
	private MyDynamicStack MyDS = new MyDynamicStack(size);
	
	@Test
	public void testMyDynamicStack() {
		assertNotNull(MyDS);
	}
	
	public void testMyDynamicStackPush() {
		for(int i=0; i<size; i++) {
			MyDS.push(entry++);
		}
		assertTrue(MyDS.isStackFull());
		MyDS.push(entry++);
		assertEquals("Stack is full. Increasing the capacity.\r\n", outConsole.toString());
		assertFalse(MyDS.isStackFull());
		testMyDynamicStackPeek();		
	}

	@Test
	public void testMyDynamicStackPushPop() {
		testMyDynamicStackPush();
		try {
			while(!MyDS.isStackEmpty()) {
				MyDS.pop();
			}
			MyDS.pop();
		} catch(Exception ex) {
			assertEquals("Stack is empty. Can not remove element.",ex.getMessage());
		}
	}

	public void testMyDynamicStackPeek() {
		long peek = MyDS.peek();
		assertEquals(6,peek);
	}
}
